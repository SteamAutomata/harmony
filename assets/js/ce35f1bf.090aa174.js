"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5688],{63666:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"NotDoneYet/WorkingWithGlobals","title":"Globals & Player State","description":"Harmony solves the problem of managing and replicating data for you.","source":"@site/docs/NotDoneYet/3.WorkingWithGlobals.md","sourceDirName":"NotDoneYet","slug":"/NotDoneYet/WorkingWithGlobals","permalink":"/harmony/docs/NotDoneYet/WorkingWithGlobals","draft":false,"unlisted":false,"editUrl":"https://github.com/steamautomata/harmony/edit/main/docs/NotDoneYet/3.WorkingWithGlobals.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"defaultSidebar","previous":{"title":"Conventions","permalink":"/harmony/docs/More/NamingConventions"},"next":{"title":"Your first Component","permalink":"/harmony/docs/NotDoneYet/Components"}}');var r=n(74848),a=n(28453);const l={sidebar_position:3},s="Globals & Player State",i={},c=[];function u(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"globals--player-state",children:"Globals & Player State"})}),"\n",(0,r.jsxs)(t.p,{children:["Harmony solves the problem of managing and replicating data for you.\r\nFor this, you have to declare your ByteNet remotes, your Player State and your Global State in ",(0,r.jsx)(t.code,{children:"ReplicatedStorage/Defs.luau"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:'--!strict\r\nlocal Harmony = require(game:GetService("ReplicatedStorage").Harmony)\r\n\r\nlocal Net = Harmony.State.DefineNetworking(function(b, packet)\r\n\treturn {\r\n        -- Define your packets here, refer to documentation of ByteNet\r\n\t}\r\nend)\r\n\r\nlocal GlobalState = Harmony.State.DefineGlobal(function(use)\r\n\treturn {\r\n\t\tTimer = use(60)\r\n\t}\r\nend)\r\n\r\nlocal PlayerState = Harmony.State.DefinePlayer(function(use, Flag)\r\n\treturn {\r\n\t\tCoins = use(10, {Flag.Save, Flag.Replicate}), -- Will save to ProfileStore & Replicate to player\r\n\t\tSessionTime = use(10, {Flag.Replicate}), -- Will just replicate to player without saving\r\n\t}\r\nend)\r\n\r\n-- Not necessary\r\nexport type Net = typeof(Net)\r\nexport type GlobalState = typeof(GlobalState)\r\nexport type PlayerState = typeof(PlayerState)\r\n\r\nreturn Harmony.State.Setup(GlobalState, PlayerState, Net)\n'})})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>s});var o=n(96540);const r={},a=o.createContext(r);function l(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);